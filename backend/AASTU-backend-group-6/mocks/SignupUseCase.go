// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SignupUseCase is an autogenerated mock type for the SignupUseCase type
type SignupUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, user
func (_m *SignupUseCase) Create(c context.Context, user domain.User) interface{} {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) interface{}); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: c, email
func (_m *SignupUseCase) ForgotPassword(c context.Context, email domain.ForgotPasswordRequest) interface{} {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ForgotPasswordRequest) interface{}); ok {
		r0 = rf(c, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HandleUnverifiedUser provides a mock function with given fields: c, email
func (_m *SignupUseCase) HandleUnverifiedUser(c context.Context, email domain.Email) interface{} {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for HandleUnverifiedUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Email) interface{}); ok {
		r0 = rf(c, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ResetPassword provides a mock function with given fields: c, password, token
func (_m *SignupUseCase) ResetPassword(c context.Context, password domain.ResetPasswordRequest, token string) interface{} {
	ret := _m.Called(c, password, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResetPasswordRequest, string) interface{}); ok {
		r0 = rf(c, password, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: c, otp
func (_m *SignupUseCase) VerifyOTP(c context.Context, otp domain.OtpToken) interface{} {
	ret := _m.Called(c, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.OtpToken) interface{}); ok {
		r0 = rf(c, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewSignupUseCase creates a new instance of SignupUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignupUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignupUseCase {
	mock := &SignupUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
