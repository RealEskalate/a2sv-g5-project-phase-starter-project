// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UnverifiedUserRepository is an autogenerated mock type for the UnverifiedUserRepository type
type UnverifiedUserRepository struct {
	mock.Mock
}

// DeleteUnverifiedUser provides a mock function with given fields: ctx, email
func (_m *UnverifiedUserRepository) DeleteUnverifiedUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnverifiedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUnverifiedUser provides a mock function with given fields: ctx, email
func (_m *UnverifiedUserRepository) FindUnverifiedUser(ctx context.Context, email string) (domain.UnverifiedUser, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUnverifiedUser")
	}

	var r0 domain.UnverifiedUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.UnverifiedUser, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.UnverifiedUser); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.UnverifiedUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUnverifiedUser provides a mock function with given fields: ctx, uv
func (_m *UnverifiedUserRepository) StoreUnverifiedUser(ctx context.Context, uv domain.UnverifiedUser) error {
	ret := _m.Called(ctx, uv)

	if len(ret) == 0 {
		panic("no return value specified for StoreUnverifiedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UnverifiedUser) error); ok {
		r0 = rf(ctx, uv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOTP provides a mock function with given fields: ctx, email, otp, expiry
func (_m *UnverifiedUserRepository) UpdateOTP(ctx context.Context, email string, otp string, expiry time.Time) (domain.UnverifiedUserResponse, error) {
	ret := _m.Called(ctx, email, otp, expiry)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOTP")
	}

	var r0 domain.UnverifiedUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (domain.UnverifiedUserResponse, error)); ok {
		return rf(ctx, email, otp, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) domain.UnverifiedUserResponse); ok {
		r0 = rf(ctx, email, otp, expiry)
	} else {
		r0 = ret.Get(0).(domain.UnverifiedUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, email, otp, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUnverifiedUserRepository creates a new instance of UnverifiedUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnverifiedUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnverifiedUserRepository {
	mock := &UnverifiedUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
