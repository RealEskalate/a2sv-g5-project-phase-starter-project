// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"
	Dtos "blogapp/Dtos"

	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// ActivateAccount provides a mock function with given fields: ctx, token
func (_m *AuthRepository) ActivateAccount(ctx context.Context, token string) (error, int) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ActivateAccount")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, string) (error, int)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CallbackHandler provides a mock function with given fields: ctx, code
func (_m *AuthRepository) CallbackHandler(ctx context.Context, code string) (Domain.Tokens, error, int) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for CallbackHandler")
	}

	var r0 Domain.Tokens
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, string) (Domain.Tokens, error, int)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Domain.Tokens); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(Domain.Tokens)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) int); ok {
		r2 = rf(ctx, code)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// ForgetPassword provides a mock function with given fields: ctx, email
func (_m *AuthRepository) ForgetPassword(ctx context.Context, email string) (error, int) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgetPassword")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, string) (error, int)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GenerateTokenFromUser provides a mock function with given fields: ctx, existingUser
func (_m *AuthRepository) GenerateTokenFromUser(ctx context.Context, existingUser Domain.User) (Domain.Tokens, error, int) {
	ret := _m.Called(ctx, existingUser)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenFromUser")
	}

	var r0 Domain.Tokens
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, Domain.User) (Domain.Tokens, error, int)); ok {
		return rf(ctx, existingUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Domain.User) Domain.Tokens); ok {
		r0 = rf(ctx, existingUser)
	} else {
		r0 = ret.Get(0).(Domain.Tokens)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Domain.User) error); ok {
		r1 = rf(ctx, existingUser)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, Domain.User) int); ok {
		r2 = rf(ctx, existingUser)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GoogleLogin provides a mock function with given fields: ctx
func (_m *AuthRepository) GoogleLogin(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GoogleLogin")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, user
func (_m *AuthRepository) Login(ctx context.Context, user *Domain.User) (Domain.Tokens, error, int) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 Domain.Tokens
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) (Domain.Tokens, error, int)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) Domain.Tokens); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(Domain.Tokens)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *Domain.User) int); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: ctx, user_id
func (_m *AuthRepository) Logout(ctx context.Context, user_id primitive.ObjectID) (error, int) {
	ret := _m.Called(ctx, user_id)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (error, int)); ok {
		return rf(ctx, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, user_id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) int); ok {
		r1 = rf(ctx, user_id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *AuthRepository) Register(ctx context.Context, user *Dtos.RegisterUserDto) (*Domain.OmitedUser, error, int) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *Dtos.RegisterUserDto) (*Domain.OmitedUser, error, int)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Dtos.RegisterUserDto) *Domain.OmitedUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.OmitedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Dtos.RegisterUserDto) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *Dtos.RegisterUserDto) int); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// ResetPassword provides a mock function with given fields: ctx, email, password, resetToken
func (_m *AuthRepository) ResetPassword(ctx context.Context, email string, password string, resetToken string) (error, int) {
	ret := _m.Called(ctx, email, password, resetToken)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (error, int)); ok {
		return rf(ctx, email, password, resetToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, password, resetToken)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) int); ok {
		r1 = rf(ctx, email, password, resetToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// SendActivationEmail provides a mock function with given fields: email
func (_m *AuthRepository) SendActivationEmail(email string) (error, int) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendActivationEmail")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(string) (error, int)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
