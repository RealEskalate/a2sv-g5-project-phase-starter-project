// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// AddTagToPost provides a mock function with given fields: ctx, id, slug
func (_m *BlogRepository) AddTagToPost(ctx context.Context, id primitive.ObjectID, slug string) (error, int) {
	ret := _m.Called(ctx, id, slug)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToPost")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) (error, int)); ok {
		return rf(ctx, id, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) error); ok {
		r0 = rf(ctx, id, slug)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) int); ok {
		r1 = rf(ctx, id, slug)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateBlog provides a mock function with given fields: ctx, post
func (_m *BlogRepository) CreateBlog(ctx context.Context, post *Domain.Post) (error, int) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Post) (error, int)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.Post) int); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *BlogRepository) DeletePost(ctx context.Context, id primitive.ObjectID) (error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DislikePost provides a mock function with given fields: ctx, id, userID
func (_m *BlogRepository) DislikePost(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) (error, int, string) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DislikePost")
	}

	var r0 error
	var r1 int
	var r2 string
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (error, int, string)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) int); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, primitive.ObjectID) string); ok {
		r2 = rf(ctx, id, userID)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// GetAllPosts provides a mock function with given fields: ctx, filter
func (_m *BlogRepository) GetAllPosts(ctx context.Context, filter Domain.Filter) ([]*Domain.Post, error, int, Domain.PaginationMetaData) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []*Domain.Post
	var r1 error
	var r2 int
	var r3 Domain.PaginationMetaData
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Filter) ([]*Domain.Post, error, int, Domain.PaginationMetaData)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Filter) []*Domain.Post); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Domain.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, Domain.Filter) int); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, Domain.Filter) Domain.PaginationMetaData); ok {
		r3 = rf(ctx, filter)
	} else {
		r3 = ret.Get(3).(Domain.PaginationMetaData)
	}

	return r0, r1, r2, r3
}

// GetComments provides a mock function with given fields: ctx, id
func (_m *BlogRepository) GetComments(ctx context.Context, id primitive.ObjectID) ([]*Domain.Comment, error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*Domain.Comment
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*Domain.Comment, error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*Domain.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetPostByAuthorID provides a mock function with given fields: ctx, authorID
func (_m *BlogRepository) GetPostByAuthorID(ctx context.Context, authorID primitive.ObjectID) ([]*Domain.Post, error, int) {
	ret := _m.Called(ctx, authorID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByAuthorID")
	}

	var r0 []*Domain.Post
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*Domain.Post, error, int)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*Domain.Post); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, authorID)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *BlogRepository) GetPostByID(ctx context.Context, id primitive.ObjectID) (*Domain.Post, error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *Domain.Post
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*Domain.Post, error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *Domain.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetPostBySlug provides a mock function with given fields: ctx, slug
func (_m *BlogRepository) GetPostBySlug(ctx context.Context, slug string) ([]*Domain.Post, error, int) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetPostBySlug")
	}

	var r0 []*Domain.Post
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Domain.Post, error, int)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Domain.Post); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) int); ok {
		r2 = rf(ctx, slug)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetTags provides a mock function with given fields: ctx, id
func (_m *BlogRepository) GetTags(ctx context.Context, id primitive.ObjectID) ([]*Domain.Tag, error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []*Domain.Tag
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*Domain.Tag, error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*Domain.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// LikePost provides a mock function with given fields: ctx, id, userID
func (_m *BlogRepository) LikePost(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) (error, int, string) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikePost")
	}

	var r0 error
	var r1 int
	var r2 string
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (error, int, string)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) int); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, primitive.ObjectID) string); ok {
		r2 = rf(ctx, id, userID)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// SearchPosts provides a mock function with given fields: ctx, query, filter
func (_m *BlogRepository) SearchPosts(ctx context.Context, query string, filter Domain.Filter) ([]*Domain.Post, error, int, Domain.PaginationMetaData) {
	ret := _m.Called(ctx, query, filter)

	if len(ret) == 0 {
		panic("no return value specified for SearchPosts")
	}

	var r0 []*Domain.Post
	var r1 error
	var r2 int
	var r3 Domain.PaginationMetaData
	if rf, ok := ret.Get(0).(func(context.Context, string, Domain.Filter) ([]*Domain.Post, error, int, Domain.PaginationMetaData)); ok {
		return rf(ctx, query, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, Domain.Filter) []*Domain.Post); ok {
		r0 = rf(ctx, query, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, Domain.Filter) error); ok {
		r1 = rf(ctx, query, filter)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, Domain.Filter) int); ok {
		r2 = rf(ctx, query, filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, Domain.Filter) Domain.PaginationMetaData); ok {
		r3 = rf(ctx, query, filter)
	} else {
		r3 = ret.Get(3).(Domain.PaginationMetaData)
	}

	return r0, r1, r2, r3
}

// UpdatePostByID provides a mock function with given fields: ctx, id, post
func (_m *BlogRepository) UpdatePostByID(ctx context.Context, id primitive.ObjectID, post *Domain.Post) (error, int) {
	ret := _m.Called(ctx, id, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostByID")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *Domain.Post) (error, int)); ok {
		return rf(ctx, id, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *Domain.Post) error); ok {
		r0 = rf(ctx, id, post)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, *Domain.Post) int); ok {
		r1 = rf(ctx, id, post)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
