// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// CommentOnPost provides a mock function with given fields: ctx, comment, objID
func (_m *CommentRepository) CommentOnPost(ctx context.Context, comment *Domain.Comment, objID primitive.ObjectID) (error, int) {
	ret := _m.Called(ctx, comment, objID)

	if len(ret) == 0 {
		panic("no return value specified for CommentOnPost")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Comment, primitive.ObjectID) (error, int)); ok {
		return rf(ctx, comment, objID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Comment, primitive.ObjectID) error); ok {
		r0 = rf(ctx, comment, objID)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.Comment, primitive.ObjectID) int); ok {
		r1 = rf(ctx, comment, objID)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *CommentRepository) DeleteComment(ctx context.Context, id primitive.ObjectID) (error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// EditComment provides a mock function with given fields: ctx, id, comment
func (_m *CommentRepository) EditComment(ctx context.Context, id primitive.ObjectID, comment *Domain.Comment) (error, int) {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for EditComment")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *Domain.Comment) (error, int)); ok {
		return rf(ctx, id, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *Domain.Comment) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, *Domain.Comment) int); ok {
		r1 = rf(ctx, id, comment)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetCommentByID provides a mock function with given fields: ctx, id
func (_m *CommentRepository) GetCommentByID(ctx context.Context, id primitive.ObjectID) (*Domain.Comment, error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *Domain.Comment
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*Domain.Comment, error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *Domain.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetUserComments provides a mock function with given fields: ctx, id
func (_m *CommentRepository) GetUserComments(ctx context.Context, id primitive.ObjectID) ([]*Domain.Comment, error, int) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserComments")
	}

	var r0 []*Domain.Comment
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*Domain.Comment, error, int)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*Domain.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) int); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
