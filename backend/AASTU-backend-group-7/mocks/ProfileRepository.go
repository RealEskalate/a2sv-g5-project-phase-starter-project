// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// DeleteProfile provides a mock function with given fields: ctx, id, current_user
func (_m *ProfileRepository) DeleteProfile(ctx context.Context, id primitive.ObjectID, current_user Domain.AccessClaims) (error, int) {
	ret := _m.Called(ctx, id, current_user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) (error, int)); ok {
		return rf(ctx, id, current_user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r0 = rf(ctx, id, current_user)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r1 = rf(ctx, id, current_user)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, id, user
func (_m *ProfileRepository) GetProfile(ctx context.Context, id primitive.ObjectID, user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(ctx, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r2 = rf(ctx, id, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// UpdateProfile provides a mock function with given fields: ctx, id, user, current_user
func (_m *ProfileRepository) UpdateProfile(ctx context.Context, id primitive.ObjectID, user Domain.User, current_user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(ctx, id, user, current_user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(ctx, id, user, current_user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(ctx, id, user, current_user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) error); ok {
		r1 = rf(ctx, id, user, current_user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) int); ok {
		r2 = rf(ctx, id, user, current_user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewProfileRepository creates a new instance of ProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileRepository {
	mock := &ProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
