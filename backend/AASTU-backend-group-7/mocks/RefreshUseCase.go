// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// RefreshUseCase is an autogenerated mock type for the RefreshUseCase type
type RefreshUseCase struct {
	mock.Mock
}

// DeleteToken provides a mock function with given fields: c, userid
func (_m *RefreshUseCase) DeleteToken(c *gin.Context, userid primitive.ObjectID) (error, int) {
	ret := _m.Called(c, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) (error, int)); ok {
		return rf(c, userid)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) error); ok {
		r0 = rf(c, userid)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID) int); ok {
		r1 = rf(c, userid)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// FindToken provides a mock function with given fields: c, userid
func (_m *RefreshUseCase) FindToken(c *gin.Context, userid primitive.ObjectID) (string, error, int) {
	ret := _m.Called(c, userid)

	if len(ret) == 0 {
		panic("no return value specified for FindToken")
	}

	var r0 string
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) (string, error, int)); ok {
		return rf(c, userid)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) string); ok {
		r0 = rf(c, userid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID) error); ok {
		r1 = rf(c, userid)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID) int); ok {
		r2 = rf(c, userid)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// StoreToken provides a mock function with given fields: c, userid, refreshToken
func (_m *RefreshUseCase) StoreToken(c *gin.Context, userid primitive.ObjectID, refreshToken string) (error, int) {
	ret := _m.Called(c, userid, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, string) (error, int)); ok {
		return rf(c, userid, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, string) error); ok {
		r0 = rf(c, userid, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, string) int); ok {
		r1 = rf(c, userid, refreshToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewRefreshUseCase creates a new instance of RefreshUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshUseCase {
	mock := &RefreshUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
