// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TagUseCase is an autogenerated mock type for the TagUseCase type
type TagUseCase struct {
	mock.Mock
}

// CreateTag provides a mock function with given fields: c, tag
func (_m *TagUseCase) CreateTag(c *gin.Context, tag *Domain.Tag) (error, int) {
	ret := _m.Called(c, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.Tag) (error, int)); ok {
		return rf(c, tag)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.Tag) error); ok {
		r0 = rf(c, tag)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *Domain.Tag) int); ok {
		r1 = rf(c, tag)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DeleteTag provides a mock function with given fields: c, id
func (_m *TagUseCase) DeleteTag(c *gin.Context, id primitive.ObjectID) (error, int) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) (error, int)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID) int); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetAllTags provides a mock function with given fields: c
func (_m *TagUseCase) GetAllTags(c *gin.Context) ([]*Domain.Tag, error, int) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTags")
	}

	var r0 []*Domain.Tag
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*Domain.Tag, error, int)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*Domain.Tag); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context) int); ok {
		r2 = rf(c)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetTagBySlug provides a mock function with given fields: c, slug
func (_m *TagUseCase) GetTagBySlug(c *gin.Context, slug string) (*Domain.Tag, error, int) {
	ret := _m.Called(c, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetTagBySlug")
	}

	var r0 *Domain.Tag
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (*Domain.Tag, error, int)); ok {
		return rf(c, slug)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) *Domain.Tag); ok {
		r0 = rf(c, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(c, slug)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, string) int); ok {
		r2 = rf(c, slug)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewTagUseCase creates a new instance of TagUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagUseCase {
	mock := &TagUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
