// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "blogapp/Domain"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserUseCases is an autogenerated mock type for the UserUseCases type
type UserUseCases struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserUseCases) CreateUser(c *gin.Context, user *Domain.User) (Domain.OmitedUser, error, int) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.User) (Domain.OmitedUser, error, int)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.User) Domain.OmitedUser); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *Domain.User) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, *Domain.User) int); ok {
		r2 = rf(c, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DeleteUsersById provides a mock function with given fields: c, id, current_user
func (_m *UserUseCases) DeleteUsersById(c *gin.Context, id primitive.ObjectID, current_user Domain.AccessClaims) (error, int) {
	ret := _m.Called(c, id, current_user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsersById")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) (error, int)); ok {
		return rf(c, id, current_user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r0 = rf(c, id, current_user)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r1 = rf(c, id, current_user)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// DemoteUser provides a mock function with given fields: c, id, current_user
func (_m *UserUseCases) DemoteUser(c *gin.Context, id primitive.ObjectID, current_user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(c, id, current_user)

	if len(ret) == 0 {
		panic("no return value specified for DemoteUser")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(c, id, current_user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(c, id, current_user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r1 = rf(c, id, current_user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r2 = rf(c, id, current_user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetUsers provides a mock function with given fields: c
func (_m *UserUseCases) GetUsers(c *gin.Context) ([]*Domain.OmitedUser, error, int) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*Domain.OmitedUser, error, int)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*Domain.OmitedUser); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.OmitedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context) int); ok {
		r2 = rf(c)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetUsersById provides a mock function with given fields: c, id, current_user
func (_m *UserUseCases) GetUsersById(c *gin.Context, id primitive.ObjectID, current_user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(c, id, current_user)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersById")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(c, id, current_user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(c, id, current_user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r1 = rf(c, id, current_user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r2 = rf(c, id, current_user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// PromoteUser provides a mock function with given fields: c, id, current_user
func (_m *UserUseCases) PromoteUser(c *gin.Context, id primitive.ObjectID, current_user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(c, id, current_user)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(c, id, current_user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(c, id, current_user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) error); ok {
		r1 = rf(c, id, current_user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.AccessClaims) int); ok {
		r2 = rf(c, id, current_user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// UpdateUsersById provides a mock function with given fields: c, id, user, current_user
func (_m *UserUseCases) UpdateUsersById(c *gin.Context, id primitive.ObjectID, user Domain.User, current_user Domain.AccessClaims) (Domain.OmitedUser, error, int) {
	ret := _m.Called(c, id, user, current_user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsersById")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) (Domain.OmitedUser, error, int)); ok {
		return rf(c, id, user, current_user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) Domain.OmitedUser); ok {
		r0 = rf(c, id, user, current_user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) error); ok {
		r1 = rf(c, id, user, current_user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.User, Domain.AccessClaims) int); ok {
		r2 = rf(c, id, user, current_user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewUserUseCases creates a new instance of UserUseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCases(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCases {
	mock := &UserUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
