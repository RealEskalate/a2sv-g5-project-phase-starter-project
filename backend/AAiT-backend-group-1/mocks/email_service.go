// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// SendMail provides a mock function with given fields: to, subject, templateName, body
func (_m *EmailService) SendMail(to string, subject string, templateName string, body interface{}) error {
	ret := _m.Called(to, subject, templateName, body)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}) error); ok {
		r0 = rf(to, subject, templateName, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPasswordResetEmail provides a mock function with given fields: to, name, resetLink, resetCode
func (_m *EmailService) SendPasswordResetEmail(to string, name string, resetLink string, resetCode string) error {
	ret := _m.Called(to, name, resetLink, resetCode)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(to, name, resetLink, resetCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerificationEmail provides a mock function with given fields: to, name, verificationLink
func (_m *EmailService) SendVerificationEmail(to string, name string, verificationLink string) error {
	ret := _m.Called(to, name, verificationLink)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(to, name, verificationLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailService creates a new instance of EmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailService {
	mock := &EmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
