// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MiddlewareService is an autogenerated mock type for the MiddlewareService type
type MiddlewareService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields:
func (_m *MiddlewareService) Authenticate() gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Authorize provides a mock function with given fields: role
func (_m *MiddlewareService) Authorize(role ...string) gin.HandlerFunc {
	_va := make([]interface{}, len(role))
	for _i := range role {
		_va[_i] = role[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(...string) gin.HandlerFunc); ok {
		r0 = rf(role...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// NewMiddlewareService creates a new instance of MiddlewareService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddlewareService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MiddlewareService {
	mock := &MiddlewareService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
