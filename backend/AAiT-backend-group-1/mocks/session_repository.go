// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/RealEskalate/a2sv-g5-project-phase-starter-project/aait-backend-group-1/domain"
	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: cxt, session
func (_m *SessionRepository) CreateToken(cxt context.Context, session *domain.Session) (*domain.Session, domain.Error) {
	ret := _m.Called(cxt, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *domain.Session
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) (*domain.Session, domain.Error)); ok {
		return rf(cxt, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) *domain.Session); ok {
		r0 = rf(cxt, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Session) domain.Error); ok {
		r1 = rf(cxt, session)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: cxt, id
func (_m *SessionRepository) DeleteToken(cxt context.Context, id string) domain.Error {
	ret := _m.Called(cxt, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(cxt, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// FindTokenById provides a mock function with given fields: cxt, id
func (_m *SessionRepository) FindTokenById(cxt context.Context, id string) (*domain.Session, domain.Error) {
	ret := _m.Called(cxt, id)

	if len(ret) == 0 {
		panic("no return value specified for FindTokenById")
	}

	var r0 *domain.Session
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Session, domain.Error)); ok {
		return rf(cxt, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Session); ok {
		r0 = rf(cxt, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// FindTokenByUserUsername provides a mock function with given fields: cxt, username
func (_m *SessionRepository) FindTokenByUserUsername(cxt context.Context, username string) (*domain.Session, bool, domain.Error) {
	ret := _m.Called(cxt, username)

	if len(ret) == 0 {
		panic("no return value specified for FindTokenByUserUsername")
	}

	var r0 *domain.Session
	var r1 bool
	var r2 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Session, bool, domain.Error)); ok {
		return rf(cxt, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Session); ok {
		r0 = rf(cxt, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(cxt, username)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) domain.Error); ok {
		r2 = rf(cxt, username)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.Error)
		}
	}

	return r0, r1, r2
}

// UpdateToken provides a mock function with given fields: cxt, id, session
func (_m *SessionRepository) UpdateToken(cxt context.Context, id string, session *domain.Session) domain.Error {
	ret := _m.Called(cxt, id, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateToken")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Session) domain.Error); ok {
		r0 = rf(cxt, id, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
