// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/RealEskalate/a2sv-g5-project-phase-starter-project/aait-backend-group-1/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CheckExistence provides a mock function with given fields: ctx, id
func (_m *UserRepository) CheckExistence(ctx context.Context, id string) (int, domain.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckExistence")
	}

	var r0 int
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, domain.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// CountByEmail provides a mock function with given fields: cxt, email
func (_m *UserRepository) CountByEmail(cxt context.Context, email string) (int, domain.Error) {
	ret := _m.Called(cxt, email)

	if len(ret) == 0 {
		panic("no return value specified for CountByEmail")
	}

	var r0 int
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, domain.Error)); ok {
		return rf(cxt, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(cxt, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// CountByUsername provides a mock function with given fields: cxt, username
func (_m *UserRepository) CountByUsername(cxt context.Context, username string) (int, domain.Error) {
	ret := _m.Called(cxt, username)

	if len(ret) == 0 {
		panic("no return value specified for CountByUsername")
	}

	var r0 int
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, domain.Error)); ok {
		return rf(cxt, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(cxt, username)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// Create provides a mock function with given fields: cxt, user
func (_m *UserRepository) Create(cxt context.Context, user *domain.User) (*domain.User, domain.Error) {
	ret := _m.Called(cxt, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.User
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (*domain.User, domain.Error)); ok {
		return rf(cxt, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(cxt, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) domain.Error); ok {
		r1 = rf(cxt, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: cxt, id
func (_m *UserRepository) Delete(cxt context.Context, id string) domain.Error {
	ret := _m.Called(cxt, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(cxt, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// FindAll provides a mock function with given fields: cxt
func (_m *UserRepository) FindAll(cxt context.Context) ([]domain.User, domain.Error) {
	ret := _m.Called(cxt)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.User
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, domain.Error)); ok {
		return rf(cxt)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(cxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) domain.Error); ok {
		r1 = rf(cxt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: cxt, email
func (_m *UserRepository) FindByEmail(cxt context.Context, email string) (*domain.User, domain.Error) {
	ret := _m.Called(cxt, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *domain.User
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, domain.Error)); ok {
		return rf(cxt, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(cxt, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// FindById provides a mock function with given fields: cxt, id
func (_m *UserRepository) FindById(cxt context.Context, id string) (*domain.User, domain.Error) {
	ret := _m.Called(cxt, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.User
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, domain.Error)); ok {
		return rf(cxt, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(cxt, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: cxt, username
func (_m *UserRepository) FindByUsername(cxt context.Context, username string) (*domain.User, domain.Error) {
	ret := _m.Called(cxt, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 *domain.User
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, domain.Error)); ok {
		return rf(cxt, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(cxt, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: cxt, id, password
func (_m *UserRepository) UpdatePassword(cxt context.Context, id string, password string) domain.Error {
	ret := _m.Called(cxt, id, password)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Error); ok {
		r0 = rf(cxt, id, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: cxt, id, user
func (_m *UserRepository) UpdateProfile(cxt context.Context, id string, user map[string]interface{}) domain.Error {
	ret := _m.Called(cxt, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) domain.Error); ok {
		r0 = rf(cxt, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// UpdateRole provides a mock function with given fields: cxt, id, role
func (_m *UserRepository) UpdateRole(cxt context.Context, id string, role string) domain.Error {
	ret := _m.Called(cxt, id, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Error); ok {
		r0 = rf(cxt, id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// UploadProfilePicture provides a mock function with given fields: cxt, picture, id
func (_m *UserRepository) UploadProfilePicture(cxt context.Context, picture domain.Photo, id string) domain.Error {
	ret := _m.Called(cxt, picture, id)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfilePicture")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Photo, string) domain.Error); ok {
		r0 = rf(cxt, picture, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
