// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/RealEskalate/a2sv-g5-project-phase-starter-project/aait-backend-group-1/domain"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// DemoteUser provides a mock function with given fields: cxt, userID
func (_m *UserUseCase) DemoteUser(cxt context.Context, userID string) domain.Error {
	ret := _m.Called(cxt, userID)

	if len(ret) == 0 {
		panic("no return value specified for DemoteUser")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(cxt, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: _a0, email
func (_m *UserUseCase) ForgotPassword(_a0 context.Context, email string) domain.Error {
	ret := _m.Called(_a0, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(_a0, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// ImageUpload provides a mock function with given fields: cxt, file, header, id
func (_m *UserUseCase) ImageUpload(cxt context.Context, file *multipart.File, header *multipart.FileHeader, id string) domain.Error {
	ret := _m.Called(cxt, file, header, id)

	if len(ret) == 0 {
		panic("no return value specified for ImageUpload")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.File, *multipart.FileHeader, string) domain.Error); ok {
		r0 = rf(cxt, file, header, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// Login provides a mock function with given fields: _a0, username, password
func (_m *UserUseCase) Login(_a0 context.Context, username string, password string) (map[string]string, domain.Error) {
	ret := _m.Called(_a0, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 map[string]string
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]string, domain.Error)); ok {
		return rf(_a0, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]string); ok {
		r0 = rf(_a0, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) domain.Error); ok {
		r1 = rf(_a0, username, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// Logout provides a mock function with given fields: cxt, token
func (_m *UserUseCase) Logout(cxt context.Context, token map[string]string) domain.Error {
	ret := _m.Called(cxt, token)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) domain.Error); ok {
		r0 = rf(cxt, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// PromoteUser provides a mock function with given fields: cxt, userID
func (_m *UserUseCase) PromoteUser(cxt context.Context, userID string) domain.Error {
	ret := _m.Called(cxt, userID)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(cxt, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// RefreshToken provides a mock function with given fields: cxt, refreshToken
func (_m *UserUseCase) RefreshToken(cxt context.Context, refreshToken string) (map[string]string, domain.Error) {
	ret := _m.Called(cxt, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 map[string]string
	var r1 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]string, domain.Error)); ok {
		return rf(cxt, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(cxt, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.Error); ok {
		r1 = rf(cxt, refreshToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.Error)
		}
	}

	return r0, r1
}

// RegisterEnd provides a mock function with given fields: cxt, token
func (_m *UserUseCase) RegisterEnd(cxt context.Context, token string) domain.Error {
	ret := _m.Called(cxt, token)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEnd")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Error); ok {
		r0 = rf(cxt, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// RegisterStart provides a mock function with given fields: cxt, user
func (_m *UserUseCase) RegisterStart(cxt context.Context, user *domain.User) domain.Error {
	ret := _m.Called(cxt, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterStart")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.Error); ok {
		r0 = rf(cxt, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// ResetPassword provides a mock function with given fields: cxt, newPassword, confirmPassword, token, resetCode
func (_m *UserUseCase) ResetPassword(cxt context.Context, newPassword string, confirmPassword string, token string, resetCode int) domain.Error {
	ret := _m.Called(cxt, newPassword, confirmPassword, token, resetCode)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) domain.Error); ok {
		r0 = rf(cxt, newPassword, confirmPassword, token, resetCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: cxt, userID, user
func (_m *UserUseCase) UpdateProfile(cxt context.Context, userID string, user map[string]interface{}) domain.Error {
	ret := _m.Called(cxt, userID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 domain.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) domain.Error); ok {
		r0 = rf(cxt, userID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Error)
		}
	}

	return r0
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
