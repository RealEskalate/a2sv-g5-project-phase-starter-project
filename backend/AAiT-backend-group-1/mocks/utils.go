// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudinary "github.com/cloudinary/cloudinary-go/v2"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	uploader "github.com/cloudinary/cloudinary-go/v2/api/uploader"
)

// Utils is an autogenerated mock type for the Utils type
type Utils struct {
	mock.Mock
}

// DeleteImage provides a mock function with given fields: publicID, cxt
func (_m *Utils) DeleteImage(publicID string, cxt context.Context) error {
	ret := _m.Called(publicID, cxt)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(publicID, cxt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateTokenWithLength provides a mock function with given fields: legth
func (_m *Utils) GenerateTokenWithLength(legth int) (int, error) {
	ret := _m.Called(legth)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenWithLength")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(legth)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(legth)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(legth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidFileFormat provides a mock function with given fields: header, formats
func (_m *Utils) IsValidFileFormat(header *multipart.FileHeader, formats ...string) bool {
	_va := make([]interface{}, len(formats))
	for _i := range formats {
		_va[_i] = formats[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, header)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsValidFileFormat")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, ...string) bool); ok {
		r0 = rf(header, formats...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveImage provides a mock function with given fields: file, name, cxt
func (_m *Utils) SaveImage(file multipart.File, name string, cxt context.Context) (*uploader.UploadResult, error) {
	ret := _m.Called(file, name, cxt)

	if len(ret) == 0 {
		panic("no return value specified for SaveImage")
	}

	var r0 *uploader.UploadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.File, string, context.Context) (*uploader.UploadResult, error)); ok {
		return rf(file, name, cxt)
	}
	if rf, ok := ret.Get(0).(func(multipart.File, string, context.Context) *uploader.UploadResult); ok {
		r0 = rf(file, name, cxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.UploadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(multipart.File, string, context.Context) error); ok {
		r1 = rf(file, name, cxt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetupCloudinary provides a mock function with given fields:
func (_m *Utils) SetupCloudinary() (*cloudinary.Cloudinary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetupCloudinary")
	}

	var r0 *cloudinary.Cloudinary
	var r1 error
	if rf, ok := ret.Get(0).(func() (*cloudinary.Cloudinary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *cloudinary.Cloudinary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudinary.Cloudinary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUtils creates a new instance of Utils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *Utils {
	mock := &Utils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
