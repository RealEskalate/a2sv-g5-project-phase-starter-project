// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CacheRepoInterface is an autogenerated mock type for the CacheRepoInterface type
type CacheRepoInterface struct {
	mock.Mock
}

// Decrement provides a mock function with given fields: key
func (_m *CacheRepoInterface) Decrement(key string) *domain.CustomError {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) *domain.CustomError); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *CacheRepoInterface) Delete(key string) *domain.CustomError {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) *domain.CustomError); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *CacheRepoInterface) Get(key string) (string, *domain.CustomError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, *domain.CustomError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// Increment provides a mock function with given fields: key
func (_m *CacheRepoInterface) Increment(key string) *domain.CustomError {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) *domain.CustomError); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value, expiry_time
func (_m *CacheRepoInterface) Set(key string, value string, expiry_time time.Duration) *domain.CustomError {
	ret := _m.Called(key, value, expiry_time)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) *domain.CustomError); ok {
		r0 = rf(key, value, expiry_time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewCacheRepoInterface creates a new instance of CacheRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepoInterface {
	mock := &CacheRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
