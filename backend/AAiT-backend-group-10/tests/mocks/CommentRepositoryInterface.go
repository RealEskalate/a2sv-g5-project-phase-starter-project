// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CommentRepositoryInterface is an autogenerated mock type for the CommentRepositoryInterface type
type CommentRepositoryInterface struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: comment
func (_m *CommentRepositoryInterface) AddComment(comment domain.Comment) *domain.CustomError {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.Comment) *domain.CustomError); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *CommentRepositoryInterface) DeleteComment(commentID uuid.UUID) *domain.CustomError {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// DeleteCommentsByBlog provides a mock function with given fields: blogID
func (_m *CommentRepositoryInterface) DeleteCommentsByBlog(blogID uuid.UUID) *domain.CustomError {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommentsByBlog")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: commentID
func (_m *CommentRepositoryInterface) GetCommentByID(commentID uuid.UUID) (domain.Comment, *domain.CustomError) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 domain.Comment
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.Comment, *domain.CustomError)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Comment); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(commentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: blogID
func (_m *CommentRepositoryInterface) GetComments(blogID uuid.UUID) ([]domain.Comment, *domain.CustomError) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []domain.Comment
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]domain.Comment, *domain.CustomError)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(blogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetCommentsCount provides a mock function with given fields: blogID
func (_m *CommentRepositoryInterface) GetCommentsCount(blogID uuid.UUID) (int, *domain.CustomError) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsCount")
	}

	var r0 int
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (int, *domain.CustomError)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) int); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(blogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: updatedComment
func (_m *CommentRepositoryInterface) UpdateComment(updatedComment domain.Comment) *domain.CustomError {
	ret := _m.Called(updatedComment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.Comment) *domain.CustomError); ok {
		r0 = rf(updatedComment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewCommentRepositoryInterface creates a new instance of CommentRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepositoryInterface {
	mock := &CommentRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
