// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"

	mock "github.com/stretchr/testify/mock"
)

// IAIService is an autogenerated mock type for the IAIService type
type IAIService struct {
	mock.Mock
}

// GenerateContent provides a mock function with given fields: topic, keywords
func (_m *IAIService) GenerateContent(topic string, keywords []string) (*domain.BlogContentResponse, error) {
	ret := _m.Called(topic, keywords)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContent")
	}

	var r0 *domain.BlogContentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*domain.BlogContentResponse, error)); ok {
		return rf(topic, keywords)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *domain.BlogContentResponse); ok {
		r0 = rf(topic, keywords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogContentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(topic, keywords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuggestImprovements provides a mock function with given fields: content
func (_m *IAIService) SuggestImprovements(content string) (*domain.SuggestionResponse, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for SuggestImprovements")
	}

	var r0 *domain.SuggestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.SuggestionResponse, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.SuggestionResponse); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SuggestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAIService creates a new instance of IAIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAIService {
	mock := &IAIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
