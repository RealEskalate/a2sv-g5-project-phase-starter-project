// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IBlogRepository is an autogenerated mock type for the IBlogRepository type
type IBlogRepository struct {
	mock.Mock
}

// AddView provides a mock function with given fields: id
func (_m *IBlogRepository) AddView(id uuid.UUID) *domain.CustomError {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for AddView")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// Create provides a mock function with given fields: blog
func (_m *IBlogRepository) Create(blog *domain.Blog) *domain.CustomError {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.Blog) *domain.CustomError); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *IBlogRepository) Delete(id uuid.UUID) *domain.CustomError {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *IBlogRepository) FindAll() ([]domain.Blog, *domain.CustomError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Blog
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func() ([]domain.Blog, *domain.CustomError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Blog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func() *domain.CustomError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *IBlogRepository) FindByID(id uuid.UUID) (*domain.Blog, *domain.CustomError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Blog
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.Blog, *domain.CustomError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Blog); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// Search provides a mock function with given fields: filter
func (_m *IBlogRepository) Search(filter domain.BlogFilter) ([]domain.Blog, int, *domain.CustomError) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.Blog
	var r1 int
	var r2 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.BlogFilter) ([]domain.Blog, int, *domain.CustomError)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.BlogFilter) []domain.Blog); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.BlogFilter) int); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(domain.BlogFilter) *domain.CustomError); ok {
		r2 = rf(filter)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*domain.CustomError)
		}
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: blog
func (_m *IBlogRepository) Update(blog *domain.Blog) *domain.CustomError {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.Blog) *domain.CustomError); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewIBlogRepository creates a new instance of IBlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlogRepository {
	mock := &IBlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
