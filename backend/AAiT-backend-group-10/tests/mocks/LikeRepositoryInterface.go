// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"
	dto "aait.backend.g10/usecases/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LikeRepositoryInterface is an autogenerated mock type for the LikeRepositoryInterface type
type LikeRepositoryInterface struct {
	mock.Mock
}

// AddLike provides a mock function with given fields: like
func (_m *LikeRepositoryInterface) AddLike(like domain.Like) *domain.CustomError {
	ret := _m.Called(like)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.Like) *domain.CustomError); ok {
		r0 = rf(like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// BlogLikeCount provides a mock function with given fields: blogID, isLike
func (_m *LikeRepositoryInterface) BlogLikeCount(blogID uuid.UUID, isLike bool) (int, *domain.CustomError) {
	ret := _m.Called(blogID, isLike)

	if len(ret) == 0 {
		panic("no return value specified for BlogLikeCount")
	}

	var r0 int
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) (int, *domain.CustomError)); ok {
		return rf(blogID, isLike)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) int); ok {
		r0 = rf(blogID, isLike)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, bool) *domain.CustomError); ok {
		r1 = rf(blogID, isLike)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// DeleteLike provides a mock function with given fields: like
func (_m *LikeRepositoryInterface) DeleteLike(like dto.UnlikeDto) *domain.CustomError {
	ret := _m.Called(like)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(dto.UnlikeDto) *domain.CustomError); ok {
		r0 = rf(like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// DeleteLikesByBlog provides a mock function with given fields: blogID
func (_m *LikeRepositoryInterface) DeleteLikesByBlog(blogID uuid.UUID) *domain.CustomError {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLikesByBlog")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// GetLike provides a mock function with given fields: blogID, reacterID
func (_m *LikeRepositoryInterface) GetLike(blogID uuid.UUID, reacterID uuid.UUID) (*domain.Like, *domain.CustomError) {
    ret := _m.Called(blogID, reacterID)

    if len(ret) == 0 {
        panic("no return value specified for GetLike")
    }

    var r0 *domain.Like
    var r1 *domain.CustomError

    if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*domain.Like, *domain.CustomError)); ok {
        return rf(blogID, reacterID)
    }

    if ret.Get(0) != nil { // Add this check to avoid a panic when ret.Get(0) is nil
        if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *domain.Like); ok {
            r0 = rf(blogID, reacterID)
        } else {
            r0 = ret.Get(0).(*domain.Like)
        }
    }

    if ret.Get(1) != nil {
        if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) *domain.CustomError); ok {
            r1 = rf(blogID, reacterID)
        } else {
            r1 = ret.Get(1).(*domain.CustomError)
        }
    }

    return r0, r1
}


// UpdateLike provides a mock function with given fields: like
func (_m *LikeRepositoryInterface) UpdateLike(like domain.Like) *domain.CustomError {
	ret := _m.Called(like)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLike")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.Like) *domain.CustomError); ok {
		r0 = rf(like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewLikeRepositoryInterface creates a new instance of LikeRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeRepositoryInterface {
	mock := &LikeRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
