// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	Domain "ASTU-backend-group-3/Blog_manager/Domain"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: username
func (_m *UserUsecase) DeleteUser(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: username
func (_m *UserUsecase) ForgotPassword(username string) (string, error) {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, LoginUser
func (_m *UserUsecase) Login(c *gin.Context, LoginUser *Domain.LoginInput) (string, error) {
	ret := _m.Called(c, LoginUser)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.LoginInput) string); ok {
		r0 = rf(c, LoginUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gin.Context, *Domain.LoginInput) error); ok {
		r1 = rf(c, LoginUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: tokenString
func (_m *UserUsecase) Logout(tokenString string) error {
	ret := _m.Called(tokenString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OAuthLogin provides a mock function with given fields: c, code
func (_m *UserUsecase) OAuthLogin(c *gin.Context, code string) (*Domain.User, string, error) {
	ret := _m.Called(c, code)

	var r0 *Domain.User
	if rf, ok := ret.Get(0).(func(*gin.Context, string) *Domain.User); ok {
		r0 = rf(c, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.User)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*gin.Context, string) string); ok {
		r1 = rf(c, code)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gin.Context, string) error); ok {
		r2 = rf(c, code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PromoteTOAdmin provides a mock function with given fields: username
func (_m *UserUsecase) PromoteTOAdmin(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: input
func (_m *UserUsecase) Register(input Domain.RegisterInput) (*Domain.User, error) {
	ret := _m.Called(input)

	var r0 *Domain.User
	if rf, ok := ret.Get(0).(func(Domain.RegisterInput) *Domain.User); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Domain.RegisterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields: token
func (_m *UserUsecase) Reset(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: username, newPassword
func (_m *UserUsecase) UpdatePassword(username string, newPassword string) error {
	ret := _m.Called(username, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: username, updatedUser
func (_m *UserUsecase) UpdateUser(username string, updatedUser *Domain.UpdateUserInput) error {
	ret := _m.Called(username, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *Domain.UpdateUserInput) error); ok {
		r0 = rf(username, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verify provides a mock function with given fields: token
func (_m *UserUsecase) Verify(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
