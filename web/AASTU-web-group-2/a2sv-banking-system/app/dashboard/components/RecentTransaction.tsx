import React, { useEffect, useState } from 'react'
import {
  getTransactionIncomes,
  getTransactions,
  getTransactionsExpenses,
} from "@/lib/api/transactionController";
import { getSession } from "next-auth/react";
import Refresh from "../../api/auth/[...nextauth]/token/RefreshToken";

import { TransactionData, TransactionResponse } from "@/types/transactionController.interface";
import { IconType } from 'react-icons';
import { useRouter } from "next/navigation";

type DataItem = {
  heading: string;
  text: string;
  headingStyle: string;
  dataStyle: string;
};

type Column = {
  icon: IconType;
  iconStyle: string;
  data: DataItem[];
};

type Data = {
  access_token: string;
  data: string;
  refresh_token: string;
};

type SessionDataType = {
  user: Data;
};
const RecentTransaction = () => {
  const [session, setSession] = useState<Data | null>(null);
  const [access_token, setAccess_token] = useState("");
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [balance, setBalance] = useState("Loading...");
  const [income, setIncome] = useState("Loading...");
  const [expense, setExpense] = useState("Loading...");
  const [transaction, setTransaction] = useState<TransactionData[]>([])
  const ShimmerEffect = () => {
    return (
      <div className='animate-pulse flex flex-col gap-4'>
        {[...Array(3)].map((_, index) => (
          <div key={index} className='flex items-center gap-5 mx-2 my-2'>
            <div className='rounded-full bg-gray-300 h-12 w-12'></div>
            <div className='flex-1'>
              <div className='h-4 bg-gray-300 rounded w-3/4 mb-2'></div>
              <div className='h-4 bg-gray-300 rounded w-1/2'></div>
            </div>
            
          </div>
        ))}
      </div>
    );
  };
  useEffect(() => {
    const fetchSession = async () => {
      try {
        const sessionData = (await getSession()) as SessionDataType | null;
        setAccess_token(await Refresh());
        if (sessionData && sessionData.user) {
          setSession(sessionData.user);
        } 
      } catch (error) {
        console.error("Error fetching session:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchSession();
  }, [router]);
  useEffect(() => {
    // Simulate a data fetch with a delay
    setTimeout(() => {
      setTransaction([]); // Simulate empty transaction data
    }, 2000);
  }, []);
  // Combined fetching data to reduce multiple useEffect hooks
  useEffect(() => {
    const fetchData = async () => {
      if (!access_token) return;

      try {
        // Fetch Cards

        // Fetch Transactions
        const transactionData:TransactionResponse = await getTransactions(0, 3, access_token)
        setTransaction(transactionData.data.content)

      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, [access_token]);
  return (
    <div >

                    <div  // Use a unique identifier if available, otherwise fallback to index
                    className=' text-nowrap overflow-x-auto border mx-4 my-4 flex flex-col md:w-[65%] md:ml-8 md:h-full md:px-4 rounded-3xl md:border bg-[#ffffff] dark:bg-[#020817] dark:border dark:border-[#333B69] '>
                          <div className='px-4 py-4 flex-grow-0'>
                            <h1 className="text-[#343C6A] font-bold text-xl md:hidden">Recent Transaction</h1>
                            <div className='flex flex-col gap-2 py-4 text-sm  '>

                            {
                              transaction.length > 0 ? (
                                transaction.slice(0,3).map((txn, index) => (
                                  <div key = {index}>
                                   <div  className='flex gap-5 items-center justify-between mx-2 my-2'>
                                    <div className = "flex items-center gap-5">
                                      <div className="flex items-center rounded-full min-h-12 min-w-12 justify-center  bg-[#FFF5D9]">
                                      {txn.type === "shopping" && 
                                        <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M16.6475 21.9727H5.07129C4.4517 21.972 3.85767 21.7256 3.41955 21.2875C2.98144 20.8494 2.73502 20.2553 2.73438 19.6357V12.7271C2.73502 12.1075 2.98144 11.5134 3.41955 11.0753C3.85767 10.6372 4.4517 10.3908 5.07129 10.3901H16.6475C17.2671 10.3908 17.8611 10.6372 18.2992 11.0753C18.7373 11.5134 18.9837 12.1075 18.9844 12.7271V19.6357C18.9837 20.2553 18.7373 20.8494 18.2992 21.2875C17.8611 21.7256 17.2671 21.972 16.6475 21.9727ZM5.07129 11.855C4.84008 11.8552 4.61842 11.9472 4.45493 12.1107C4.29144 12.2742 4.19948 12.4958 4.19922 12.7271V19.6357C4.19948 19.867 4.29144 20.0886 4.45493 20.2521C4.61842 20.4156 4.84008 20.5076 5.07129 20.5078H16.6475C16.8787 20.5076 17.1003 20.4156 17.2638 20.2521C17.4273 20.0886 17.5193 19.867 17.5195 19.6357V12.7271C17.5193 12.4958 17.4273 12.2742 17.2638 12.1107C17.1003 11.9472 16.8787 11.8552 16.6475 11.855H5.07129Z" fill="#FFBB38"/>
                                        <path d="M19.9297 18.0283H18.252C18.0577 18.0283 17.8714 17.9512 17.7341 17.8138C17.5967 17.6764 17.5195 17.4901 17.5195 17.2959C17.5195 17.1016 17.5967 16.9154 17.7341 16.778C17.8714 16.6406 18.0577 16.5635 18.252 16.5635H19.9297C20.1607 16.563 20.3821 16.4709 20.5454 16.3074C20.7087 16.144 20.8005 15.9224 20.8008 15.6914V8.78271C20.8007 8.55159 20.7089 8.32995 20.5456 8.16638C20.3823 8.00282 20.1608 7.91067 19.9297 7.91016H8.35352C8.12231 7.91041 7.90064 8.00238 7.73715 8.16587C7.57367 8.32935 7.4817 8.55102 7.48145 8.78223V11.1221C7.48145 11.3163 7.40428 11.5026 7.26692 11.64C7.12957 11.7773 6.94327 11.8545 6.74902 11.8545C6.55477 11.8545 6.36848 11.7773 6.23112 11.64C6.09377 11.5026 6.0166 11.3163 6.0166 11.1221V8.78271C6.01712 8.16304 6.26348 7.56889 6.70161 7.13067C7.13974 6.69244 7.73384 6.44596 8.35352 6.44531H19.9297C20.5492 6.44622 21.143 6.69282 21.581 7.13101C22.0189 7.5692 22.2651 8.16321 22.2656 8.78271V15.6914C22.265 16.3108 22.0187 16.9047 21.5808 17.3428C21.1429 17.7809 20.5491 18.0274 19.9297 18.0283Z" fill="#FFBB38"/>
                                        <path d="M18.252 16.7378H3.4668C3.27255 16.7378 3.08625 16.6606 2.9489 16.5233C2.81154 16.3859 2.73438 16.1996 2.73438 16.0054V13.5454C2.73438 13.3512 2.81154 13.1649 2.9489 13.0275C3.08625 12.8902 3.27255 12.813 3.4668 12.813H18.252C18.4462 12.813 18.6325 12.8902 18.7699 13.0275C18.9072 13.1649 18.9844 13.3512 18.9844 13.5454V16.0054C18.9844 16.1996 18.9072 16.3859 18.7699 16.5233C18.6325 16.6606 18.4462 16.7378 18.252 16.7378ZM4.19922 15.273H17.5195V14.2778H4.19922V15.273Z" fill="#FFBB38"/>
                                      </svg>
                                      }
                                      {txn.type === "transfer" && 
                                        <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M16.6475 21.9727H5.07129C4.4517 21.972 3.85767 21.7256 3.41955 21.2875C2.98144 20.8494 2.73502 20.2553 2.73438 19.6357V12.7271C2.73502 12.1075 2.98144 11.5134 3.41955 11.0753C3.85767 10.6372 4.4517 10.3908 5.07129 10.3901H16.6475C17.2671 10.3908 17.8611 10.6372 18.2992 11.0753C18.7373 11.5134 18.9837 12.1075 18.9844 12.7271V19.6357C18.9837 20.2553 18.7373 20.8494 18.2992 21.2875C17.8611 21.7256 17.2671 21.972 16.6475 21.9727ZM5.07129 11.855C4.84008 11.8552 4.61842 11.9472 4.45493 12.1107C4.29144 12.2742 4.19948 12.4958 4.19922 12.7271V19.6357C4.19948 19.867 4.29144 20.0886 4.45493 20.2521C4.61842 20.4156 4.84008 20.5076 5.07129 20.5078H16.6475C16.8787 20.5076 17.1003 20.4156 17.2638 20.2521C17.4273 20.0886 17.5193 19.867 17.5195 19.6357V12.7271C17.5193 12.4958 17.4273 12.2742 17.2638 12.1107C17.1003 11.9472 16.8787 11.8552 16.6475 11.855H5.07129Z" fill="#FFBB38"/>
                                            <path d="M19.9297 18.0283H18.252C18.0577 18.0283 17.8714 17.9512 17.7341 17.8138C17.5967 17.6764 17.5195 17.4901 17.5195 17.2959C17.5195 17.1016 17.5967 16.9154 17.7341 16.778C17.8714 16.6406 18.0577 16.5635 18.252 16.5635H19.9297C20.1607 16.563 20.3821 16.4709 20.5454 16.3074C20.7087 16.144 20.8005 15.9224 20.8008 15.6914V8.78271C20.8007 8.55159 20.7089 8.32995 20.5456 8.16638C20.3823 8.00282 20.1608 7.91067 19.9297 7.91016H8.35352C8.12231 7.91041 7.90064 8.00238 7.73715 8.16587C7.57367 8.32935 7.4817 8.55102 7.48145 8.78223V11.1221C7.48145 11.3163 7.40428 11.5026 7.26692 11.64C7.12957 11.7773 6.94327 11.8545 6.74902 11.8545C6.55477 11.8545 6.36848 11.7773 6.23112 11.64C6.09377 11.5026 6.0166 11.3163 6.0166 11.1221V8.78271C6.01712 8.16304 6.26348 7.56889 6.70161 7.13067C7.13974 6.69244 7.73384 6.44596 8.35352 6.44531H19.9297C20.5492 6.44622 21.143 6.69282 21.581 7.13101C22.0189 7.5692 22.2651 8.16321 22.2656 8.78271V15.6914C22.265 16.3108 22.0187 16.9047 21.5808 17.3428C21.1429 17.7809 20.5491 18.0274 19.9297 18.0283Z" fill="#FFBB38"/>
                                            <path d="M18.252 16.7378H3.4668C3.27255 16.7378 3.08625 16.6606 2.9489 16.5233C2.81154 16.3859 2.73438 16.1996 2.73438 16.0054V13.5454C2.73438 13.3512 2.81154 13.1649 2.9489 13.0275C3.08625 12.8902 3.27255 12.813 3.4668 12.813H18.252C18.4462 12.813 18.6325 12.8902 18.7699 13.0275C18.9072 13.1649 18.9844 13.3512 18.9844 13.5454V16.0054C18.9844 16.1996 18.9072 16.3859 18.7699 16.5233C18.6325 16.6606 18.4462 16.7378 18.252 16.7378ZM4.19922 15.273H17.5195V14.2778H4.19922V15.273Z" fill="#FFBB38"/>
                                          </svg>
                                      }
                                      {txn.type === "deposit" && 
                                      
                                      <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M16.6475 21.9727H5.07129C4.4517 21.972 3.85767 21.7256 3.41955 21.2875C2.98144 20.8494 2.73502 20.2553 2.73438 19.6357V12.7271C2.73502 12.1075 2.98144 11.5134 3.41955 11.0753C3.85767 10.6372 4.4517 10.3908 5.07129 10.3901H16.6475C17.2671 10.3908 17.8611 10.6372 18.2992 11.0753C18.7373 11.5134 18.9837 12.1075 18.9844 12.7271V19.6357C18.9837 20.2553 18.7373 20.8494 18.2992 21.2875C17.8611 21.7256 17.2671 21.972 16.6475 21.9727ZM5.07129 11.855C4.84008 11.8552 4.61842 11.9472 4.45493 12.1107C4.29144 12.2742 4.19948 12.4958 4.19922 12.7271V19.6357C4.19948 19.867 4.29144 20.0886 4.45493 20.2521C4.61842 20.4156 4.84008 20.5076 5.07129 20.5078H16.6475C16.8787 20.5076 17.1003 20.4156 17.2638 20.2521C17.4273 20.0886 17.5193 19.867 17.5195 19.6357V12.7271C17.5193 12.4958 17.4273 12.2742 17.2638 12.1107C17.1003 11.9472 16.8787 11.8552 16.6475 11.855H5.07129Z" fill="#FFBB38"/>
                                      <path d="M19.9297 18.0283H18.252C18.0577 18.0283 17.8714 17.9512 17.7341 17.8138C17.5967 17.6764 17.5195 17.4901 17.5195 17.2959C17.5195 17.1016 17.5967 16.9154 17.7341 16.778C17.8714 16.6406 18.0577 16.5635 18.252 16.5635H19.9297C20.1607 16.563 20.3821 16.4709 20.5454 16.3074C20.7087 16.144 20.8005 15.9224 20.8008 15.6914V8.78271C20.8007 8.55159 20.7089 8.32995 20.5456 8.16638C20.3823 8.00282 20.1608 7.91067 19.9297 7.91016H8.35352C8.12231 7.91041 7.90064 8.00238 7.73715 8.16587C7.57367 8.32935 7.4817 8.55102 7.48145 8.78223V11.1221C7.48145 11.3163 7.40428 11.5026 7.26692 11.64C7.12957 11.7773 6.94327 11.8545 6.74902 11.8545C6.55477 11.8545 6.36848 11.7773 6.23112 11.64C6.09377 11.5026 6.0166 11.3163 6.0166 11.1221V8.78271C6.01712 8.16304 6.26348 7.56889 6.70161 7.13067C7.13974 6.69244 7.73384 6.44596 8.35352 6.44531H19.9297C20.5492 6.44622 21.143 6.69282 21.581 7.13101C22.0189 7.5692 22.2651 8.16321 22.2656 8.78271V15.6914C22.265 16.3108 22.0187 16.9047 21.5808 17.3428C21.1429 17.7809 20.5491 18.0274 19.9297 18.0283Z" fill="#FFBB38"/>
                                      <path d="M18.252 16.7378H3.4668C3.27255 16.7378 3.08625 16.6606 2.9489 16.5233C2.81154 16.3859 2.73438 16.1996 2.73438 16.0054V13.5454C2.73438 13.3512 2.81154 13.1649 2.9489 13.0275C3.08625 12.8902 3.27255 12.813 3.4668 12.813H18.252C18.4462 12.813 18.6325 12.8902 18.7699 13.0275C18.9072 13.1649 18.9844 13.3512 18.9844 13.5454V16.0054C18.9844 16.1996 18.9072 16.3859 18.7699 16.5233C18.6325 16.6606 18.4462 16.7378 18.252 16.7378ZM4.19922 15.273H17.5195V14.2778H4.19922V15.273Z" fill="#FFBB38"/>
                                    </svg>
                                      }
                                      {txn.type === "withdrawal" && 
                                      
                                      <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M16.6475 21.9727H5.07129C4.4517 21.972 3.85767 21.7256 3.41955 21.2875C2.98144 20.8494 2.73502 20.2553 2.73438 19.6357V12.7271C2.73502 12.1075 2.98144 11.5134 3.41955 11.0753C3.85767 10.6372 4.4517 10.3908 5.07129 10.3901H16.6475C17.2671 10.3908 17.8611 10.6372 18.2992 11.0753C18.7373 11.5134 18.9837 12.1075 18.9844 12.7271V19.6357C18.9837 20.2553 18.7373 20.8494 18.2992 21.2875C17.8611 21.7256 17.2671 21.972 16.6475 21.9727ZM5.07129 11.855C4.84008 11.8552 4.61842 11.9472 4.45493 12.1107C4.29144 12.2742 4.19948 12.4958 4.19922 12.7271V19.6357C4.19948 19.867 4.29144 20.0886 4.45493 20.2521C4.61842 20.4156 4.84008 20.5076 5.07129 20.5078H16.6475C16.8787 20.5076 17.1003 20.4156 17.2638 20.2521C17.4273 20.0886 17.5193 19.867 17.5195 19.6357V12.7271C17.5193 12.4958 17.4273 12.2742 17.2638 12.1107C17.1003 11.9472 16.8787 11.8552 16.6475 11.855H5.07129Z" fill="#FFBB38"/>
                                      <path d="M19.9297 18.0283H18.252C18.0577 18.0283 17.8714 17.9512 17.7341 17.8138C17.5967 17.6764 17.5195 17.4901 17.5195 17.2959C17.5195 17.1016 17.5967 16.9154 17.7341 16.778C17.8714 16.6406 18.0577 16.5635 18.252 16.5635H19.9297C20.1607 16.563 20.3821 16.4709 20.5454 16.3074C20.7087 16.144 20.8005 15.9224 20.8008 15.6914V8.78271C20.8007 8.55159 20.7089 8.32995 20.5456 8.16638C20.3823 8.00282 20.1608 7.91067 19.9297 7.91016H8.35352C8.12231 7.91041 7.90064 8.00238 7.73715 8.16587C7.57367 8.32935 7.4817 8.55102 7.48145 8.78223V11.1221C7.48145 11.3163 7.40428 11.5026 7.26692 11.64C7.12957 11.7773 6.94327 11.8545 6.74902 11.8545C6.55477 11.8545 6.36848 11.7773 6.23112 11.64C6.09377 11.5026 6.0166 11.3163 6.0166 11.1221V8.78271C6.01712 8.16304 6.26348 7.56889 6.70161 7.13067C7.13974 6.69244 7.73384 6.44596 8.35352 6.44531H19.9297C20.5492 6.44622 21.143 6.69282 21.581 7.13101C22.0189 7.5692 22.2651 8.16321 22.2656 8.78271V15.6914C22.265 16.3108 22.0187 16.9047 21.5808 17.3428C21.1429 17.7809 20.5491 18.0274 19.9297 18.0283Z" fill="#FFBB38"/>
                                      <path d="M18.252 16.7378H3.4668C3.27255 16.7378 3.08625 16.6606 2.9489 16.5233C2.81154 16.3859 2.73438 16.1996 2.73438 16.0054V13.5454C2.73438 13.3512 2.81154 13.1649 2.9489 13.0275C3.08625 12.8902 3.27255 12.813 3.4668 12.813H18.252C18.4462 12.813 18.6325 12.8902 18.7699 13.0275C18.9072 13.1649 18.9844 13.3512 18.9844 13.5454V16.0054C18.9844 16.1996 18.9072 16.3859 18.7699 16.5233C18.6325 16.6606 18.4462 16.7378 18.252 16.7378ZM4.19922 15.273H17.5195V14.2778H4.19922V15.273Z" fill="#FFBB38"/>
                                    </svg>

                                      }         

    
    
                                      </div>   
                                      <div>
                                          <div>
                                          <p className='text-[#232323] font-semibold dark:text-white'>
                                              {txn.description}
                                          </p> 
                                          <p className='text-[#718EBF]'>
                                              {formatDate(txn.date)}
                                          </p>  
                                          </div>
                                      </div> 
                                    </div>
                                    <p className={`text-xs font-bold ${txn.amount < 0 ? "text-[#FE5C73]" : "text-[#16DBAA]"}`}>
                                            {txn.amount < 0 ? `- ${Math.abs(txn.amount)}` : `+ ${txn.amount}`}
                                          </p>
    
                                </div>
                                </div>
                                                              ))
                              ):(
                                <ShimmerEffect />
                                )
                              }

                              </div>  
                            </div>
                          </div>
                      </div>
    
  )
}

export default RecentTransaction
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);

  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  return date.toLocaleDateString("en-US", options);
};